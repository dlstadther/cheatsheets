{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cheatsheets \u00b6 This is the home to my cheatsheets!","title":"Cheatsheets"},{"location":"#cheatsheets","text":"This is the home to my cheatsheets!","title":"Cheatsheets"},{"location":"git/","text":"Git \u00b6 Git is a wonderful tool for source control management (scm), especially when working on multiple features as an individual or on a team. Personally, I don't like to get too complicated with my git commands. I prefer to know the core of git well enough to serve me for 99% of of uses. Then using Google-fu for those 1% situations. Terminology \u00b6 Term Description local on the harddrive of the computer running your git commands remote central scm server (i.e. Github, Gitlab, Bitbucket, etc.) origin traditional tag associated with a repo's remote commit set of file changes with a message (think of this similar to a checkpoint save) branch ... merge ... rebase ... push upload your local commits to a remote pull download remote commits to your local clone download a remote repo to your local for the first time staged local files which have been prepared to be included in the next commit (the targets of git add ) unstaged local files which have been included in a prior commit with changes not yet ready to be committed untracked local files within a repo's directory which have never been included in a commit Commands \u00b6 Set up ssh key for use with ssh git auth \u00b6 ssh-keygen -t rsa -b 4096 -C \"yourEmail@domain.com\" # provide optional passphrase eval \" $( ssh-agent -s ) \" ssh-add -K ~/.ssh/id_rsa # copy public key to scm provider # follow their instructions for where you set in your auth profile cat ~/.ssh/id_rsa.pub Start a new local repo \u00b6 mkdir localRepo cd ./localRepo git init Pull Remote Repo to Local (for the first time) \u00b6 # assuming Github project fakerepo, owned by dlstadther # with ssh auth git clone git@github.com:dlstadther/fakerepo.git # with https basic auth git clone https://github.com/dlstadther/fakerepo.git # ssh auth with custom directory name git clone git@github.com:dlstadther/fakerepo.git foobar Update local references to remotes \u00b6 git fetch origin Start new branch \u00b6 # create and checkout a new branch \"feature/my-feature\" based off local master git checkout -b feature/my-feature master View all locally tracked branches \u00b6 git branch -a Change branches \u00b6 # assumes already on master, and the existence of develop git checkout develop # switch back to previous branch git checkout - Update branch with remote master \u00b6 # without updating local master w/o merge commit git fetch origin git rebase origin/master # with local update and merge commit git checkout master git pull origin master git checkout - git merge master Update [feature] branch with remote \u00b6 # with merge commit git pull origin my-branch # without merge commit git pull --rebase Rename branch \u00b6 git branch -m oldname newname # rename current branch git branch -m newname Add to last commit \u00b6 git add <stuff> git commit --amend <keep or change commit message> # may require remote force push git push origin <branch> --force Modify last N commits \u00b6 # let's say you want to change the order or quantity of commits # ranging from the most recent to 7 commits ago git rebase -i HEAD~7 # modify/reorder/delete commits using options provided # i mostly use fixup and squash # and reorder or delete commits Trash all tracked (and uncommitted) changes \u00b6 git reset --hard Trash uncommitted changes for a single tracked file \u00b6 git checkout HEAD -- path/to/file Avoid whitespace issues \u00b6 git diff --check Blaming \u00b6 Basic git blame -L 24 ,48 mydir/myfile.py Ignoring the impact of a commit (e.g. last commit was just formats) git blame --ignore-rev { commit-hash } -L 24 ,48 mydir/myfile.py Ignoring the impact of lots of commits (via file) cat <EOF > .git-blame-ignore-revs # Applied black { commit-hash-full-40-char } # PEP8 updates { commit-hash-full-40-char } EOF git blame --ignore-revs-file .git-blame-ignore-revs -L 24 ,48 mydir/myfile.py Update git config with name of file to always use for ignores git config blame.ignoreRevsFile .git-blame-ignore-revs git blame -L 24 ,48 mydir/myfile.py # ignores specified changes Important Links and Practices \u00b6 General: https://github.com/MikeMcQuaid/GitInPractice/blob/master/12-CreatingACleanHistory.adoc Use gitflow \u00b6 Gitflow is a branching and development practice which encourages project organization and release management. While I like the gitflow branching model, I do not like to rely on the obfuscation of the gitflow commands. Although requiring more keystrokes, I prefer to be hyper-aware of the component git commands which follow the gitflow branching model. Check out this gist for a comparison of the git equivalents of gitflow commands. Write useful commit messages \u00b6 Commit messages contain a lot of value if used well and written effectively. I strongly recommend reading Chris Beam's blog post about How to Write a Git Commit Message . Consult git in practice \u00b6 A very thorough and practical approach to teaching in-depth git: GitInPractice . Bookmark git flight rules \u00b6 Sometimes things go wrong and you need to know how to dig yourself out of a hole. In these moments, consult git-flight-rules . Read documentation \u00b6 When all else fails, or you have ample curiosity (and time), checkout the git manpages .","title":"Git"},{"location":"git/#git","text":"Git is a wonderful tool for source control management (scm), especially when working on multiple features as an individual or on a team. Personally, I don't like to get too complicated with my git commands. I prefer to know the core of git well enough to serve me for 99% of of uses. Then using Google-fu for those 1% situations.","title":"Git"},{"location":"git/#terminology","text":"Term Description local on the harddrive of the computer running your git commands remote central scm server (i.e. Github, Gitlab, Bitbucket, etc.) origin traditional tag associated with a repo's remote commit set of file changes with a message (think of this similar to a checkpoint save) branch ... merge ... rebase ... push upload your local commits to a remote pull download remote commits to your local clone download a remote repo to your local for the first time staged local files which have been prepared to be included in the next commit (the targets of git add ) unstaged local files which have been included in a prior commit with changes not yet ready to be committed untracked local files within a repo's directory which have never been included in a commit","title":"Terminology"},{"location":"git/#commands","text":"","title":"Commands"},{"location":"git/#set-up-ssh-key-for-use-with-ssh-git-auth","text":"ssh-keygen -t rsa -b 4096 -C \"yourEmail@domain.com\" # provide optional passphrase eval \" $( ssh-agent -s ) \" ssh-add -K ~/.ssh/id_rsa # copy public key to scm provider # follow their instructions for where you set in your auth profile cat ~/.ssh/id_rsa.pub","title":"Set up ssh key for use with ssh git auth"},{"location":"git/#start-a-new-local-repo","text":"mkdir localRepo cd ./localRepo git init","title":"Start a new local repo"},{"location":"git/#pull-remote-repo-to-local-for-the-first-time","text":"# assuming Github project fakerepo, owned by dlstadther # with ssh auth git clone git@github.com:dlstadther/fakerepo.git # with https basic auth git clone https://github.com/dlstadther/fakerepo.git # ssh auth with custom directory name git clone git@github.com:dlstadther/fakerepo.git foobar","title":"Pull Remote Repo to Local (for the first time)"},{"location":"git/#update-local-references-to-remotes","text":"git fetch origin","title":"Update local references to remotes"},{"location":"git/#start-new-branch","text":"# create and checkout a new branch \"feature/my-feature\" based off local master git checkout -b feature/my-feature master","title":"Start new branch"},{"location":"git/#view-all-locally-tracked-branches","text":"git branch -a","title":"View all locally tracked branches"},{"location":"git/#change-branches","text":"# assumes already on master, and the existence of develop git checkout develop # switch back to previous branch git checkout -","title":"Change branches"},{"location":"git/#update-branch-with-remote-master","text":"# without updating local master w/o merge commit git fetch origin git rebase origin/master # with local update and merge commit git checkout master git pull origin master git checkout - git merge master","title":"Update branch with remote master"},{"location":"git/#update-feature-branch-with-remote","text":"# with merge commit git pull origin my-branch # without merge commit git pull --rebase","title":"Update [feature] branch with remote"},{"location":"git/#rename-branch","text":"git branch -m oldname newname # rename current branch git branch -m newname","title":"Rename branch"},{"location":"git/#add-to-last-commit","text":"git add <stuff> git commit --amend <keep or change commit message> # may require remote force push git push origin <branch> --force","title":"Add to last commit"},{"location":"git/#modify-last-n-commits","text":"# let's say you want to change the order or quantity of commits # ranging from the most recent to 7 commits ago git rebase -i HEAD~7 # modify/reorder/delete commits using options provided # i mostly use fixup and squash # and reorder or delete commits","title":"Modify last N commits"},{"location":"git/#trash-all-tracked-and-uncommitted-changes","text":"git reset --hard","title":"Trash all tracked (and uncommitted) changes"},{"location":"git/#trash-uncommitted-changes-for-a-single-tracked-file","text":"git checkout HEAD -- path/to/file","title":"Trash uncommitted changes for a single tracked file"},{"location":"git/#avoid-whitespace-issues","text":"git diff --check","title":"Avoid whitespace issues"},{"location":"git/#blaming","text":"Basic git blame -L 24 ,48 mydir/myfile.py Ignoring the impact of a commit (e.g. last commit was just formats) git blame --ignore-rev { commit-hash } -L 24 ,48 mydir/myfile.py Ignoring the impact of lots of commits (via file) cat <EOF > .git-blame-ignore-revs # Applied black { commit-hash-full-40-char } # PEP8 updates { commit-hash-full-40-char } EOF git blame --ignore-revs-file .git-blame-ignore-revs -L 24 ,48 mydir/myfile.py Update git config with name of file to always use for ignores git config blame.ignoreRevsFile .git-blame-ignore-revs git blame -L 24 ,48 mydir/myfile.py # ignores specified changes","title":"Blaming"},{"location":"git/#important-links-and-practices","text":"General: https://github.com/MikeMcQuaid/GitInPractice/blob/master/12-CreatingACleanHistory.adoc","title":"Important Links and Practices"},{"location":"git/#use-gitflow","text":"Gitflow is a branching and development practice which encourages project organization and release management. While I like the gitflow branching model, I do not like to rely on the obfuscation of the gitflow commands. Although requiring more keystrokes, I prefer to be hyper-aware of the component git commands which follow the gitflow branching model. Check out this gist for a comparison of the git equivalents of gitflow commands.","title":"Use gitflow"},{"location":"git/#write-useful-commit-messages","text":"Commit messages contain a lot of value if used well and written effectively. I strongly recommend reading Chris Beam's blog post about How to Write a Git Commit Message .","title":"Write useful commit messages"},{"location":"git/#consult-git-in-practice","text":"A very thorough and practical approach to teaching in-depth git: GitInPractice .","title":"Consult git in practice"},{"location":"git/#bookmark-git-flight-rules","text":"Sometimes things go wrong and you need to know how to dig yourself out of a hole. In these moments, consult git-flight-rules .","title":"Bookmark git flight rules"},{"location":"git/#read-documentation","text":"When all else fails, or you have ample curiosity (and time), checkout the git manpages .","title":"Read documentation"},{"location":"mkdocs/","text":"Mkdocs \u00b6 Install \u00b6 pip install mkdocs Default Project Structure \u00b6 mkdocs.yml docs/ - index.md Override Docs Directory \u00b6 # mkdocs.yml docs_dir : cheatsheets Dev Server \u00b6 # in same dir as mkdocs.yml mkdocs serve # open http://127.0.0.1:8000/ Build the Site \u00b6 mkdocs build Navigation Configuration \u00b6 If specified, the navigation will present only that which is specified. # mkdocs.yml nav : - Home : index.md - About : about.md If no navigation is provided, defaults to all contents inside of the docs_dir in alphanumeric order.","title":"Mkdocs"},{"location":"mkdocs/#mkdocs","text":"","title":"Mkdocs"},{"location":"mkdocs/#install","text":"pip install mkdocs","title":"Install"},{"location":"mkdocs/#default-project-structure","text":"mkdocs.yml docs/ - index.md","title":"Default Project Structure"},{"location":"mkdocs/#override-docs-directory","text":"# mkdocs.yml docs_dir : cheatsheets","title":"Override Docs Directory"},{"location":"mkdocs/#dev-server","text":"# in same dir as mkdocs.yml mkdocs serve # open http://127.0.0.1:8000/","title":"Dev Server"},{"location":"mkdocs/#build-the-site","text":"mkdocs build","title":"Build the Site"},{"location":"mkdocs/#navigation-configuration","text":"If specified, the navigation will present only that which is specified. # mkdocs.yml nav : - Home : index.md - About : about.md If no navigation is provided, defaults to all contents inside of the docs_dir in alphanumeric order.","title":"Navigation Configuration"},{"location":"system76/","text":"System76 \u00b6 Firmware Update for Custom Keymap # clone fork of embedded controller code git clone git@github.com:dlstadther/ec.git # checkout custom keymap cd ec git fetch origin git checkout ds # install build dependencies ./scripts/deps.sh # prepare firmware with custom keymap make BOARD = system76/lemp9 KEYMAP = dillon # flash firmware, using bugfix command # ref: https://github.com/system76/ec/issues/185#issuecomment-846033330 PKG_CONFIG_PATH = /usr/lib/x86_64-linux-gnu/pkgconfig/ make flash_internal # system76 generic instructions: # https://github.com/system76/ec/blob/master/doc/keyboard-layout-customization.md","title":"System76"},{"location":"system76/#system76","text":"Firmware Update for Custom Keymap # clone fork of embedded controller code git clone git@github.com:dlstadther/ec.git # checkout custom keymap cd ec git fetch origin git checkout ds # install build dependencies ./scripts/deps.sh # prepare firmware with custom keymap make BOARD = system76/lemp9 KEYMAP = dillon # flash firmware, using bugfix command # ref: https://github.com/system76/ec/issues/185#issuecomment-846033330 PKG_CONFIG_PATH = /usr/lib/x86_64-linux-gnu/pkgconfig/ make flash_internal # system76 generic instructions: # https://github.com/system76/ec/blob/master/doc/keyboard-layout-customization.md","title":"System76"}]}