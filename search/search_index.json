{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cheatsheets","text":"<p>This is the home to my cheatsheets!</p>"},{"location":"git/","title":"Git","text":"<p>Git is a wonderful tool for source control management (scm), especially when working on multiple features as an individual or on a team.</p> <p>Personally, I don't like to get too complicated with my git commands. I prefer to know the core of git well enough to serve me for 99% of of uses. Then using Google-fu for those 1% situations.</p>"},{"location":"git/#terminology","title":"Terminology","text":"Term Description local on the harddrive of the computer running your git commands remote central scm server (i.e. Github, Gitlab, Bitbucket, etc.) origin traditional tag associated with a repo's remote commit set of file changes with a message (think of this similar to a checkpoint save) branch ... merge ... rebase ... push upload your local commits to a remote pull download remote commits to your local clone download a remote repo to your local for the first time staged local files which have been prepared to be included in the next commit (the targets of <code>git add</code>) unstaged local files which have been included in a prior commit with changes not yet ready to be committed untracked local files within a repo's directory which have never been included in a commit"},{"location":"git/#commands","title":"Commands","text":""},{"location":"git/#set-up-ssh-key-for-use-with-ssh-git-auth","title":"Set up ssh key for use with ssh git auth","text":"<pre><code>ssh-keygen -t rsa -b 4096 -C \"yourEmail@domain.com\"\n# provide optional passphrase\neval \"$(ssh-agent -s)\"\nssh-add -K ~/.ssh/id_rsa\n\n# copy public key to scm provider\n# follow their instructions for where you set in your auth profile\ncat ~/.ssh/id_rsa.pub\n</code></pre>"},{"location":"git/#start-a-new-local-repo","title":"Start a new local repo","text":"<pre><code>mkdir localRepo\ncd ./localRepo\ngit init\n</code></pre>"},{"location":"git/#pull-remote-repo-to-local-for-the-first-time","title":"Pull Remote Repo to Local (for the first time)","text":"<pre><code># assuming Github project fakerepo, owned by dlstadther\n# with ssh auth\ngit clone git@github.com:dlstadther/fakerepo.git\n\n# with https basic auth\ngit clone https://github.com/dlstadther/fakerepo.git\n\n# ssh auth with custom directory name\ngit clone git@github.com:dlstadther/fakerepo.git foobar\n</code></pre>"},{"location":"git/#update-local-references-to-remotes","title":"Update local references to remotes","text":"<pre><code>git fetch origin\n</code></pre>"},{"location":"git/#start-new-branch","title":"Start new branch","text":"<pre><code># create and checkout a new branch \"feature/my-feature\" based off local master\ngit checkout -b feature/my-feature master\n</code></pre>"},{"location":"git/#view-all-locally-tracked-branches","title":"View all locally tracked branches","text":"<pre><code>git branch -a\n</code></pre>"},{"location":"git/#change-branches","title":"Change branches","text":"<pre><code># assumes already on master, and the existence of develop\ngit checkout develop\n\n# switch back to previous branch\ngit checkout -\n</code></pre>"},{"location":"git/#update-branch-with-remote-master","title":"Update branch with remote master","text":"<pre><code># without updating local master w/o merge commit\ngit fetch origin\ngit rebase origin/master\n\n# with local update and merge commit\ngit checkout master\ngit pull origin master\ngit checkout -\ngit merge master\n</code></pre>"},{"location":"git/#update-feature-branch-with-remote","title":"Update [feature] branch with remote","text":"<pre><code># with merge commit\ngit pull origin my-branch\n\n# without merge commit\ngit pull --rebase\n</code></pre>"},{"location":"git/#rename-branch","title":"Rename branch","text":"<pre><code>git branch -m oldname newname\n\n# rename current branch\ngit branch -m newname\n</code></pre>"},{"location":"git/#add-to-last-commit","title":"Add to last commit","text":"<pre><code>git add &lt;stuff&gt;\ngit commit --amend\n&lt;keep or change commit message&gt;\n\n# may require remote force push\ngit push origin &lt;branch&gt; --force\n</code></pre>"},{"location":"git/#modify-last-n-commits","title":"Modify last N commits","text":"<pre><code># let's say you want to change the order or quantity of commits\n#  ranging from the most recent to 7 commits ago\ngit rebase -i HEAD~7\n\n# modify/reorder/delete commits using options provided\n#  i mostly use fixup and squash\n#  and reorder or delete commits\n</code></pre>"},{"location":"git/#trash-all-tracked-and-uncommitted-changes","title":"Trash all tracked (and uncommitted) changes","text":"<pre><code>git reset --hard\n</code></pre>"},{"location":"git/#trash-uncommitted-changes-for-a-single-tracked-file","title":"Trash uncommitted changes for a single tracked file","text":"<pre><code>git checkout HEAD -- path/to/file\n</code></pre>"},{"location":"git/#avoid-whitespace-issues","title":"Avoid whitespace issues","text":"<pre><code>git diff --check\n</code></pre>"},{"location":"git/#blaming","title":"Blaming","text":"<p>Basic <pre><code>git blame -L 24,48 mydir/myfile.py\n</code></pre></p> <p>Ignoring the impact of a commit (e.g. last commit was just formats) <pre><code>git blame --ignore-rev {commit-hash} -L 24,48 mydir/myfile.py\n</code></pre></p> <p>Ignoring the impact of lots of commits (via file) <pre><code>cat &lt;EOF &gt; .git-blame-ignore-revs\n# Applied black\n{commit-hash-full-40-char}\n# PEP8 updates\n{commit-hash-full-40-char}\nEOF\n\ngit blame --ignore-revs-file .git-blame-ignore-revs -L 24,48 mydir/myfile.py\n</code></pre></p> <p>Update git config with name of file to always use for ignores <pre><code>git config blame.ignoreRevsFile .git-blame-ignore-revs\ngit blame -L 24,48 mydir/myfile.py  # ignores specified changes\n</code></pre></p>"},{"location":"git/#important-links-and-practices","title":"Important Links and Practices","text":"<p>General: https://github.com/MikeMcQuaid/GitInPractice/blob/master/12-CreatingACleanHistory.adoc</p>"},{"location":"git/#use-gitflow","title":"Use gitflow","text":"<p>Gitflow is a branching and development practice which encourages project organization and release management.</p> <p>While I like the gitflow branching model, I do not like to rely on the obfuscation of the gitflow commands. Although requiring more keystrokes, I prefer to be hyper-aware of the component git commands which follow the gitflow branching model. Check out this gist for a comparison of the git equivalents of gitflow commands.</p>"},{"location":"git/#write-useful-commit-messages","title":"Write useful commit messages","text":"<p>Commit messages contain a lot of value if used well and written effectively. I strongly recommend reading Chris Beam's blog post about How to Write a Git Commit Message.</p>"},{"location":"git/#consult-git-in-practice","title":"Consult git in practice","text":"<p>A very thorough and practical approach to teaching in-depth git: GitInPractice.</p>"},{"location":"git/#bookmark-git-flight-rules","title":"Bookmark git flight rules","text":"<p>Sometimes things go wrong and you need to know how to dig yourself out of a hole. In these moments, consult git-flight-rules.</p>"},{"location":"git/#read-documentation","title":"Read documentation","text":"<p>When all else fails, or you have ample curiosity (and time), checkout the git manpages.</p>"},{"location":"jekyll/","title":"Jekyll","text":"<p>Requires Ruby to be installed</p> <pre><code># see local build with drafts\n$ bundle exec jekyll serve --drafts\n\n# update gems\n$ bundle update\n</code></pre>"},{"location":"mkdocs/","title":"Mkdocs","text":""},{"location":"mkdocs/#install","title":"Install","text":"<pre><code>pip install mkdocs\n</code></pre>"},{"location":"mkdocs/#default-project-structure","title":"Default Project Structure","text":"<pre><code>mkdocs.yml\ndocs/\n- index.md\n</code></pre>"},{"location":"mkdocs/#override-docs-directory","title":"Override Docs Directory","text":"<pre><code># mkdocs.yml\ndocs_dir: cheatsheets\n</code></pre>"},{"location":"mkdocs/#dev-server","title":"Dev Server","text":"<pre><code># in same dir as mkdocs.yml\nmkdocs serve\n\n# open http://127.0.0.1:8000/\n</code></pre>"},{"location":"mkdocs/#build-the-site","title":"Build the Site","text":"<pre><code>mkdocs build\n</code></pre>"},{"location":"mkdocs/#navigation-configuration","title":"Navigation Configuration","text":"<p>If specified, the navigation will present only that which is specified. <pre><code># mkdocs.yml\nnav:\n- Home: index.md\n- About: about.md\n</code></pre> If no navigation is provided, defaults to all contents inside of the <code>docs_dir</code> in alphanumeric order.</p>"},{"location":"ruby/","title":"Ruby","text":"<pre><code># install ruby version manager\ncurl -sSL https://get.rvm.io | bash -s stable\nrvm reload\n\n# install latest ruby\nrvm list known\nrvm install 3.0.0\n\n# check version\nruby -v\n\n# update bundler\nbundle update --bundler\n</code></pre>"},{"location":"system76/","title":"System76","text":"<p>Firmware Update for Custom Keymap <pre><code># clone fork of embedded controller code\ngit clone git@github.com:dlstadther/ec.git\n\n# checkout custom keymap\ncd ec\ngit fetch origin\ngit checkout ds\n\n# install build dependencies\n./scripts/deps.sh\n\n# prepare firmware with custom keymap\nmake BOARD=system76/lemp9 KEYMAP=dillon\n\n# flash firmware, using bugfix command\n# ref: https://github.com/system76/ec/issues/185#issuecomment-846033330\nPKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig/ make flash_internal\n\n# system76 generic instructions:\n# https://github.com/system76/ec/blob/master/doc/keyboard-layout-customization.md\n</code></pre></p>"}]}